Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> element
Rule 1     element -> TERM
Rule 2     element -> END
Rule 3     element -> element STAR
Rule 4     element -> element ALT element
Rule 5     element -> element CONCAT element
Rule 6     element -> EPSILON
Rule 7     element -> EPS
Rule 8     element -> element PLUS
Rule 9     element -> element QUESTION
Rule 10    element -> LPAR element RPAR

Terminals, with rules where they appear

ALT                  : 4
CONCAT               : 5
END                  : 2
EPS                  : 7
EPSILON              : 6
LPAR                 : 10
PLUS                 : 8
QUESTION             : 9
RPAR                 : 10
STAR                 : 3
TERM                 : 1
error                : 

Nonterminals, with rules where they appear

element              : 3 4 4 5 5 8 9 10 0

Parsing method: LALR

state 0

    (0) S' -> . element
    (1) element -> . TERM
    (2) element -> . END
    (3) element -> . element STAR
    (4) element -> . element ALT element
    (5) element -> . element CONCAT element
    (6) element -> . EPSILON
    (7) element -> . EPS
    (8) element -> . element PLUS
    (9) element -> . element QUESTION
    (10) element -> . LPAR element RPAR

    TERM            shift and go to state 2
    END             shift and go to state 3
    EPSILON         shift and go to state 4
    EPS             shift and go to state 5
    LPAR            shift and go to state 6

    element                        shift and go to state 1

state 1

    (0) S' -> element .
    (3) element -> element . STAR
    (4) element -> element . ALT element
    (5) element -> element . CONCAT element
    (8) element -> element . PLUS
    (9) element -> element . QUESTION

    STAR            shift and go to state 7
    ALT             shift and go to state 8
    CONCAT          shift and go to state 9
    PLUS            shift and go to state 10
    QUESTION        shift and go to state 11


state 2

    (1) element -> TERM .

    STAR            reduce using rule 1 (element -> TERM .)
    ALT             reduce using rule 1 (element -> TERM .)
    CONCAT          reduce using rule 1 (element -> TERM .)
    PLUS            reduce using rule 1 (element -> TERM .)
    QUESTION        reduce using rule 1 (element -> TERM .)
    $end            reduce using rule 1 (element -> TERM .)
    RPAR            reduce using rule 1 (element -> TERM .)


state 3

    (2) element -> END .

    STAR            reduce using rule 2 (element -> END .)
    ALT             reduce using rule 2 (element -> END .)
    CONCAT          reduce using rule 2 (element -> END .)
    PLUS            reduce using rule 2 (element -> END .)
    QUESTION        reduce using rule 2 (element -> END .)
    $end            reduce using rule 2 (element -> END .)
    RPAR            reduce using rule 2 (element -> END .)


state 4

    (6) element -> EPSILON .

    STAR            reduce using rule 6 (element -> EPSILON .)
    ALT             reduce using rule 6 (element -> EPSILON .)
    CONCAT          reduce using rule 6 (element -> EPSILON .)
    PLUS            reduce using rule 6 (element -> EPSILON .)
    QUESTION        reduce using rule 6 (element -> EPSILON .)
    $end            reduce using rule 6 (element -> EPSILON .)
    RPAR            reduce using rule 6 (element -> EPSILON .)


state 5

    (7) element -> EPS .

    STAR            reduce using rule 7 (element -> EPS .)
    ALT             reduce using rule 7 (element -> EPS .)
    CONCAT          reduce using rule 7 (element -> EPS .)
    PLUS            reduce using rule 7 (element -> EPS .)
    QUESTION        reduce using rule 7 (element -> EPS .)
    $end            reduce using rule 7 (element -> EPS .)
    RPAR            reduce using rule 7 (element -> EPS .)


state 6

    (10) element -> LPAR . element RPAR
    (1) element -> . TERM
    (2) element -> . END
    (3) element -> . element STAR
    (4) element -> . element ALT element
    (5) element -> . element CONCAT element
    (6) element -> . EPSILON
    (7) element -> . EPS
    (8) element -> . element PLUS
    (9) element -> . element QUESTION
    (10) element -> . LPAR element RPAR

    TERM            shift and go to state 2
    END             shift and go to state 3
    EPSILON         shift and go to state 4
    EPS             shift and go to state 5
    LPAR            shift and go to state 6

    element                        shift and go to state 12

state 7

    (3) element -> element STAR .

    STAR            reduce using rule 3 (element -> element STAR .)
    ALT             reduce using rule 3 (element -> element STAR .)
    CONCAT          reduce using rule 3 (element -> element STAR .)
    PLUS            reduce using rule 3 (element -> element STAR .)
    QUESTION        reduce using rule 3 (element -> element STAR .)
    $end            reduce using rule 3 (element -> element STAR .)
    RPAR            reduce using rule 3 (element -> element STAR .)


state 8

    (4) element -> element ALT . element
    (1) element -> . TERM
    (2) element -> . END
    (3) element -> . element STAR
    (4) element -> . element ALT element
    (5) element -> . element CONCAT element
    (6) element -> . EPSILON
    (7) element -> . EPS
    (8) element -> . element PLUS
    (9) element -> . element QUESTION
    (10) element -> . LPAR element RPAR

    TERM            shift and go to state 2
    END             shift and go to state 3
    EPSILON         shift and go to state 4
    EPS             shift and go to state 5
    LPAR            shift and go to state 6

    element                        shift and go to state 13

state 9

    (5) element -> element CONCAT . element
    (1) element -> . TERM
    (2) element -> . END
    (3) element -> . element STAR
    (4) element -> . element ALT element
    (5) element -> . element CONCAT element
    (6) element -> . EPSILON
    (7) element -> . EPS
    (8) element -> . element PLUS
    (9) element -> . element QUESTION
    (10) element -> . LPAR element RPAR

    TERM            shift and go to state 2
    END             shift and go to state 3
    EPSILON         shift and go to state 4
    EPS             shift and go to state 5
    LPAR            shift and go to state 6

    element                        shift and go to state 14

state 10

    (8) element -> element PLUS .

    STAR            reduce using rule 8 (element -> element PLUS .)
    ALT             reduce using rule 8 (element -> element PLUS .)
    CONCAT          reduce using rule 8 (element -> element PLUS .)
    PLUS            reduce using rule 8 (element -> element PLUS .)
    QUESTION        reduce using rule 8 (element -> element PLUS .)
    $end            reduce using rule 8 (element -> element PLUS .)
    RPAR            reduce using rule 8 (element -> element PLUS .)


state 11

    (9) element -> element QUESTION .

    STAR            reduce using rule 9 (element -> element QUESTION .)
    ALT             reduce using rule 9 (element -> element QUESTION .)
    CONCAT          reduce using rule 9 (element -> element QUESTION .)
    PLUS            reduce using rule 9 (element -> element QUESTION .)
    QUESTION        reduce using rule 9 (element -> element QUESTION .)
    $end            reduce using rule 9 (element -> element QUESTION .)
    RPAR            reduce using rule 9 (element -> element QUESTION .)


state 12

    (10) element -> LPAR element . RPAR
    (3) element -> element . STAR
    (4) element -> element . ALT element
    (5) element -> element . CONCAT element
    (8) element -> element . PLUS
    (9) element -> element . QUESTION

    RPAR            shift and go to state 15
    STAR            shift and go to state 7
    ALT             shift and go to state 8
    CONCAT          shift and go to state 9
    PLUS            shift and go to state 10
    QUESTION        shift and go to state 11


state 13

    (4) element -> element ALT element .
    (3) element -> element . STAR
    (4) element -> element . ALT element
    (5) element -> element . CONCAT element
    (8) element -> element . PLUS
    (9) element -> element . QUESTION

    $end            reduce using rule 4 (element -> element ALT element .)
    RPAR            reduce using rule 4 (element -> element ALT element .)
    STAR            shift and go to state 7
    ALT             shift and go to state 8
    CONCAT          shift and go to state 9
    PLUS            shift and go to state 10
    QUESTION        shift and go to state 11

  ! STAR            [ reduce using rule 4 (element -> element ALT element .) ]
  ! ALT             [ reduce using rule 4 (element -> element ALT element .) ]
  ! CONCAT          [ reduce using rule 4 (element -> element ALT element .) ]
  ! PLUS            [ reduce using rule 4 (element -> element ALT element .) ]
  ! QUESTION        [ reduce using rule 4 (element -> element ALT element .) ]


state 14

    (5) element -> element CONCAT element .
    (3) element -> element . STAR
    (4) element -> element . ALT element
    (5) element -> element . CONCAT element
    (8) element -> element . PLUS
    (9) element -> element . QUESTION

    ALT             reduce using rule 5 (element -> element CONCAT element .)
    CONCAT          reduce using rule 5 (element -> element CONCAT element .)
    $end            reduce using rule 5 (element -> element CONCAT element .)
    RPAR            reduce using rule 5 (element -> element CONCAT element .)
    STAR            shift and go to state 7
    PLUS            shift and go to state 10
    QUESTION        shift and go to state 11

  ! STAR            [ reduce using rule 5 (element -> element CONCAT element .) ]
  ! PLUS            [ reduce using rule 5 (element -> element CONCAT element .) ]
  ! QUESTION        [ reduce using rule 5 (element -> element CONCAT element .) ]
  ! ALT             [ shift and go to state 8 ]
  ! CONCAT          [ shift and go to state 9 ]


state 15

    (10) element -> LPAR element RPAR .

    STAR            reduce using rule 10 (element -> LPAR element RPAR .)
    ALT             reduce using rule 10 (element -> LPAR element RPAR .)
    CONCAT          reduce using rule 10 (element -> LPAR element RPAR .)
    PLUS            reduce using rule 10 (element -> LPAR element RPAR .)
    QUESTION        reduce using rule 10 (element -> LPAR element RPAR .)
    $end            reduce using rule 10 (element -> LPAR element RPAR .)
    RPAR            reduce using rule 10 (element -> LPAR element RPAR .)

